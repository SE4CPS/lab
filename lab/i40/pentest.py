import requests

# Define the base URL for the API
base_url = "https://dev.sprout-ly.com"

# API Endpoints
create_url = f"{base_url}/api/plant/data"
read_url = f"{base_url}/api/plant/data"

# Test data
data = {
    "PlantID": 1,
    "PlantName": "test",
    "ScientificName": "tets",
    "Threshhold": 10.0
}

# Headers (add the necessary authentication token)
headers = {
    'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',
    'Content-Type': 'application/json'
}

# Function to perform CRUD operations and check response
def perform_crud_operations():
    print("Creating Data...")
    response_create = requests.post(create_url, json=data, headers=headers)
    if response_create.status_code == 200:
        print(f"Create Response: {response_create.json()}")
    else:
        print(f"Create Response: {response_create.status_code} {response_create.text}")

    print("Reading Data...")
    response_read = requests.get(read_url, headers=headers)
    if response_read.status_code == 200:
        print(f"Read Response: {response_read.json()}")
    else:
        print(f"Read Response: {response_read.status_code} {response_read.text}")

# Function to simulate CSRF attack
def simulate_csrf_attack():
    print("Simulating CSRF Attack...")
    csrf_attack_url = f"{base_url}/api/plant/data"
    response = requests.post(csrf_attack_url, json=data, headers={'Content-Type': 'application/json'})
    if response.status_code == 200:
        print(f"CSRF Attack Response: {response.json()}")
    else:
        print(f"CSRF Attack Response: {response.status_code} {response.text}")

# Function to simulate Rate Limiting
def simulate_rate_limiting():
    print("Simulating Rate Limiting Attack...")
    rate_limiting_url = f"{base_url}/api/plant/data"
    for i in range(10):  # Trying to make 10 rapid requests
        response = requests.post(rate_limiting_url, json=data, headers=headers)
        if response.status_code == 200:
            print(f"Rate Limiting Response {i+1}: {response.status_code} {response.json()}")
        else:
            print(f"Rate Limiting Response {i+1}: {response.status_code} {response.text}")

# Function to simulate Privilege Escalation
def simulate_privilege_escalation():
    print("Simulating Privilege Escalation...")
    response = requests.post(create_url, json=data, headers={'Authorization': 'Bearer <ADMIN_AUTH_TOKEN>', 'Content-Type': 'application/json'})
    if response.status_code == 200:
        print(f"Privilege Escalation Response: {response.json()}")
    else:
        print(f"Privilege Escalation Response: {response.status_code} {response.text}")

# Function to simulate Broken Authentication (Login Bypass)
def simulate_broken_authentication():
    print("Simulating Broken Authentication...")
    response = requests.get(read_url, headers={'Authorization': 'Bearer <INVALID_TOKEN>'})
    if response.status_code == 200:
        print(f"Broken Authentication Response: {response.json()}")
    else:
        print(f"Broken Authentication Response: {response.status_code} {response.text}")

# Execute tests
def execute_tests():
    perform_crud_operations()
    simulate_csrf_attack()
    simulate_rate_limiting()
    simulate_privilege_escalation()
    simulate_broken_authentication()

if __name__ == "__main__":
    execute_tests()
